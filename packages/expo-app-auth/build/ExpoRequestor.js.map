{"version":3,"file":"ExpoRequestor.js","sourceRoot":"","sources":["../src/ExpoRequestor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC1D,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAC;AAEjE;;GAEG;AACH,MAAM,OAAO,aAAc,SAAQ,SAAS;IAC1C,KAAK,CAAC,GAAG,CAAI,QAA4B;QACvC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE;YACjB,MAAM,IAAI,YAAY,CAAC,yBAAyB,CAAC,CAAC;SACnD;QACD,IAAI,GAAG,GAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAa,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAgB;YAC/B,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,IAAI,QAAQ,CAAC,IAAI,EAAE;YACjB,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,MAAM,EAAE;gBAC/D,WAAW,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAc,CAAC;aAC5C;iBAAM;gBACL,IAAI,YAAY,GAAG,IAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACtD,YAAY,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;oBAClC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;gBACtC,CAAC,CAAC,CAAC;aACJ;SACF;QAED,0BAA0B;QAC1B,WAAW,CAAC,OAAO,GAAG,EAAE,CAAC;QACzB,IAAI,QAAQ,CAAC,OAAO,EAAE;YACpB,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE;gBAC9B,IAAI,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE;oBACzB,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;iBACxD;aACF;SACF;QAED,MAAM,cAAc,GAAG,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;QAEvF,0DAA0D;QAC1D,kGAAkG;QAClG,IAAI;QACJ,IAAI,cAAc,EAAE;YAClB,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,gDAAgD,CAAC;SAClF;QAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;QAE1D,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE;YACnD,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACzD,IAAI,cAAc,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;gBACrF,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;aACxB;YACD,2DAA2D;YAC3D,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;SACxB;QACD,MAAM,IAAI,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC1E,CAAC;CACF","sourcesContent":["import { AppAuthError, Requestor } from '@openid/appauth';\nimport { URL, URLSearchParams } from 'react-native-url-polyfill';\n\n/**\n * Extends Requester\n */\nexport class ExpoRequestor extends Requestor {\n  async xhr<T>(settings: JQueryAjaxSettings): Promise<T> {\n    if (!settings.url) {\n      throw new AppAuthError('A URL must be provided.');\n    }\n    let url: URL = new URL(settings.url as string);\n    const requestInit: RequestInit = {\n      method: settings.method,\n      mode: 'cors',\n    };\n\n    if (settings.data) {\n      if (settings.method && settings.method.toUpperCase() === 'POST') {\n        requestInit.body = settings.data as string;\n      } else {\n        let searchParams = new URLSearchParams(settings.data);\n        searchParams.forEach((value, key) => {\n          url.searchParams.append(key, value);\n        });\n      }\n    }\n\n    // Set the request headers\n    requestInit.headers = {};\n    if (settings.headers) {\n      for (let i in settings.headers) {\n        if (i in settings.headers) {\n          requestInit.headers[i] = settings.headers[i] as string;\n        }\n      }\n    }\n\n    const isJsonDataType = settings.dataType && settings.dataType.toLowerCase() === 'json';\n\n    // Set 'Accept' header value for json requests (Taken from\n    // https://github.com/jquery/jquery/blob/e0d941156900a6bff7c098c8ea7290528e468cf8/src/ajax.js#L644\n    // )\n    if (isJsonDataType) {\n      requestInit.headers['Accept'] = 'application/json, text/javascript, */*; q=0.01';\n    }\n\n    const response = await fetch(url.toString(), requestInit);\n\n    if (response.status >= 200 && response.status < 300) {\n      const contentType = response.headers.get('content-type');\n      if (isJsonDataType || (contentType && contentType.indexOf('application/json') !== -1)) {\n        return response.json();\n      }\n      // @ts-ignore: Type 'string' is not assignable to type 'T'.\n      return response.text();\n    }\n    throw new AppAuthError(response.status.toString(), response.statusText);\n  }\n}\n"]}