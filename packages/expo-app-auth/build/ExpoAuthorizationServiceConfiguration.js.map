{"version":3,"file":"ExpoAuthorizationServiceConfiguration.js","sourceRoot":"","sources":["../src/ExpoAuthorizationServiceConfiguration.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,iCAAiC,GAGlC,MAAM,iBAAiB,CAAC;AAEzB,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD;;;GAGG;AACH,MAAM,eAAe,GAAG,aAAa,CAAC;AAEtC;;;GAGG;AACH,MAAM,oBAAoB,GAAG,sBAAsB,CAAC;AAEpD;;GAEG;AACH,MAAM,OAAO,qCAAsC,SAAQ,iCAAiC;IAE1F,YAAY,OAAO;QACjB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC;IACnC,CAAC;IAED,aAAa;IACb,MAAM;QACJ,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,eAAe,CACpB,eAAuB,EACvB,SAAqB;QAErB,MAAM,OAAO,GAAG,GAAG,eAAe,IAAI,eAAe,IAAI,oBAAoB,EAAE,CAAC;QAEhF,MAAM,cAAc,GAAG,SAAS,IAAI,IAAI,aAAa,EAAE,CAAC;QAExD,OAAO,cAAc;aAClB,GAAG,CAAwC,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;aAC7F,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,qCAAqC,CAAC,IAAI,CAAC,CAAC,CAAC;IACnE,CAAC;CACF","sourcesContent":["import {\n  AuthorizationServiceConfiguration,\n  AuthorizationServiceConfigurationJson,\n  Requestor,\n} from '@openid/appauth';\n\nimport { ExpoRequestor } from './ExpoRequestor';\n\n/**\n * The standard base path for well-known resources on domains.\n * See https://tools.ietf.org/html/rfc5785 for more information.\n */\nconst WELL_KNOWN_PATH = '.well-known';\n\n/**\n * The standard resource under the well known path at which an OpenID Connect\n * discovery document can be found under an issuer's base URI.\n */\nconst OPENID_CONFIGURATION = 'openid-configuration';\n\n/**\n * Extends AuthorizationServiceConfiguration adding support for discoveryDocument\n */\nexport class ExpoAuthorizationServiceConfiguration extends AuthorizationServiceConfiguration {\n  discoveryDocument: Record<string, string | string[]>;\n  constructor(request) {\n    super(request);\n    this.discoveryDocument = request;\n  }\n\n  // @ts-ignore\n  toJson(): Record<string, string | string[]> {\n    return this.discoveryDocument;\n  }\n\n  static fetchFromIssuer(\n    openIdIssuerUrl: string,\n    requestor?: Requestor\n  ): Promise<ExpoAuthorizationServiceConfiguration> {\n    const fullUrl = `${openIdIssuerUrl}/${WELL_KNOWN_PATH}/${OPENID_CONFIGURATION}`;\n\n    const requestorToUse = requestor || new ExpoRequestor();\n\n    return requestorToUse\n      .xhr<AuthorizationServiceConfigurationJson>({ url: fullUrl, dataType: 'json', method: 'GET' })\n      .then(json => new ExpoAuthorizationServiceConfiguration(json));\n  }\n}\n"]}